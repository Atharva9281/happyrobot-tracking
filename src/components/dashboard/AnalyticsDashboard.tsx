'use client'

import React, { useState, useEffect, useCallback } from 'react'
import { useAuth } from '@/hooks/useAuth'
import { useShipments } from '@/hooks/useShipments'
import { Shipment } from '@/types/shipment'
import MapView from '@/components/map/MapView'
import MetricsCard from './MetricsCard'
import ShipmentTable from './ShipmentTable'
import CreateShipmentModal from '@/components/modals/CreateShipmentModal'

// ‚úÖ Import the new modals
import EditShipmentModal from '@/components/modals/EditShipmentModal'
import DeleteShipmentModal from '@/components/modals/DeleteShipmentModal'

// IMPORT YOUR ENHANCED AI CHAT
import AIChat from '@/components/ai/AIChat'

// UPDATED IMPORTS - Keep your existing structure
import AIActionsDashboard from '@/components/workflows/AIActions'
import CommunicationHub, { CommunicationItem } from '@/components/communication/CommunicationHub'

// NEW IMPORTS - Add these new components
import Header from '@/components/layout/Header'
import ExportModal from '@/components/modals/ExportModal'

// üöÄ NEW SIMULATION MODAL
import SimulationModal from '@/components/modals/SimulationModal'

interface DashboardData {
  overview: {
    totalShipments: number
    activeShipments: number
    deliveredShipments: number
    delayedShipments: number
    pendingShipments: number
    totalRevenue: number
    onTimePercentage: number
  }
  kpis: Array<{
    title: string
    value: string
    change: number
    changeType: 'increase' | 'decrease'
    icon: string
    color: string
  }>
  statusDistribution: Array<{
    status: string
    count: number
    color: string
  }>
  aiActivity: {
    total: number
    calls: number
    emails: number
    notifications: number
  }
}

export default function AnalyticsDashboard() {
  const { user, signOut } = useAuth()
  
  // ‚úÖ Get initial data from hook
  const { 
    shipments: hookShipments, 
    loading: shipmentsLoading, 
    updateShipment,
    deleteShipment
  } = useShipments()
  
  // ‚úÖ LOCAL STATE - Override hook's shipments with our own state
  const [localShipments, setLocalShipments] = useState<Shipment[]>([])
  
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null)
  const [selectedShipment, setSelectedShipment] = useState<Shipment | null>(null)
  const [loading, setLoading] = useState(true)
  const [timeframe] = useState('30d')
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showExportModal, setShowExportModal] = useState(false)

  // ‚úÖ Modal states for edit/delete
  const [showEditModal, setShowEditModal] = useState<any>(null)
  const [showDeleteModal, setShowDeleteModal] = useState<any>(null)

  // üöÄ NEW SIMULATION MODAL STATE
  const [showSimulationModal, setShowSimulationModal] = useState(false)

  // EXISTING STATE - Keep all your existing state
  const [triggeredCommunications, setTriggeredCommunications] = useState<CommunicationItem[]>([])

  // ‚úÖ NEW STATE: For communications generated by CommunicationHub
  const [generatedCommunications, setGeneratedCommunications] = useState<CommunicationItem[]>([])

  // AI Integration State
  const [aiActions, setAIActions] = useState<any[]>([])
  const [approvalActions] = useState<any[]>([])
  const openaiApiKey = process.env.NEXT_PUBLIC_OPENAI_API_KEY || ''

  // ‚úÖ SYNC: Update local state when hook provides new data
  useEffect(() => {
    if (hookShipments.length > 0) {
      console.log('üîÑ Syncing local shipments with hook shipments')
      setLocalShipments(hookShipments)
    }
  }, [hookShipments])

  // ‚úÖ CRITICAL FIX: Use useCallback to prevent infinite loops
  const handleCommunicationsGenerated = useCallback((communications: CommunicationItem[]) => {
    console.log('üì° [Dashboard] Received', communications.length, 'communications from CommunicationHub for export')
    setGeneratedCommunications(communications)
  }, []) // Empty dependency array - function never changes

  // ‚úÖ IMMEDIATE STATE UPDATE: Update shipment with instant UI update
  const handleShipmentUpdate = async (shipmentId: string, updates: any): Promise<boolean> => {
    console.log(`üîÑ [Dashboard] Updating shipment ${shipmentId}:`, updates)
    
    // ‚úÖ STEP 1: Update local state IMMEDIATELY (optimistic update)
    console.log('‚ö° [Dashboard] Immediate state update...')
    setLocalShipments(prevShipments => 
      prevShipments.map(shipment => 
        shipment.id === shipmentId 
          ? { ...shipment, ...updates }
          : shipment
      )
    )
    console.log('‚úÖ [Dashboard] Local state updated immediately')
    
    // ‚úÖ STEP 2: Update database in background
    const result = await updateShipment(shipmentId, updates)
    
    if (result.success) {
      console.log('‚úÖ [Dashboard] Database update successful')
      
      // Update selectedShipment if needed
      if (selectedShipment?.id === shipmentId) {
        setSelectedShipment(prev => prev ? { ...prev, ...updates } : null)
      }
      
      // ‚úÖ Generate new communication for status change
      const shipment = localShipments.find(s => s.id === shipmentId)
      if (shipment && updates.status) {
        const customerName = (shipment as any).customer_name || 'Customer'
        
        const newComm: CommunicationItem = {
          id: `update-${shipmentId}-${Date.now()}`,
          shipmentNumber: shipment.shipment_number || 'Unknown',
          shipmentId: shipment.id,
          type: 'email',
          direction: 'outbound',
          status: 'sent',
          sender: 'logistics@happyrobot.ai',
          recipient: `${customerName.toLowerCase().replace(/\s+/g, '.')}@company.com`,
          subject: `Status Update: ${shipment.shipment_number}`,
          content: `Your shipment status has been updated to: ${updates.status}`,
          timestamp: new Date(),
          priority: 'medium',
          tags: ['manual_update', 'status_change'],
          metadata: {
            trigger: 'manual_send',
            customerName: customerName,
            automationType: 'status_update'
          }
        }
        
        setTriggeredCommunications(prev => [newComm, ...prev])
        console.log('‚úÖ Generated new communication for status update')
      }
      
      return true
    } else {
      console.log('‚ùå [Dashboard] Database update failed, reverting local state')
      
      // ‚úÖ ROLLBACK: If database update fails, revert local state
      setLocalShipments(hookShipments)
      alert(`Update failed: ${result.error}`)
      return false
    }
  }

  // ‚úÖ IMMEDIATE STATE UPDATE: Delete shipment with instant UI update
  const handleShipmentDelete = async (shipmentId: string): Promise<boolean> => {
    console.log(`üóëÔ∏è [Dashboard] Deleting shipment ${shipmentId}`)
    
    // ‚úÖ STEP 1: Remove from local state IMMEDIATELY (optimistic update)
    console.log('‚ö° [Dashboard] Immediate state removal...')
    const shipmentToDelete = localShipments.find(s => s.id === shipmentId)
    setLocalShipments(prevShipments => 
      prevShipments.filter(shipment => shipment.id !== shipmentId)
    )
    console.log('‚úÖ [Dashboard] Local state updated immediately')
    
    // ‚úÖ Remove related communications
    if (shipmentToDelete) {
      setTriggeredCommunications(prev => 
        prev.filter(comm => comm.shipmentNumber !== (shipmentToDelete.shipment_number || ''))
      )
      console.log('‚úÖ Cleaned up communications for deleted shipment')
    }
    
    // ‚úÖ STEP 2: Delete from database in background
    const result = await deleteShipment(shipmentId)
    
    if (result.success) {
      console.log('‚úÖ [Dashboard] Database delete successful')
      
      // Clear selected shipment if it was deleted
      if (selectedShipment?.id === shipmentId) {
        setSelectedShipment(null)
      }
      
      return true
    } else {
      console.log('‚ùå [Dashboard] Database delete failed, reverting local state')
      
      // ‚úÖ ROLLBACK: If database delete fails, restore the shipment
      if (shipmentToDelete) {
        setLocalShipments(prevShipments => [...prevShipments, shipmentToDelete])
      }
      alert(`Delete failed: ${result.error}`)
      return false
    }
  }

  // ‚úÖ Modal trigger functions
  const handleEditShipment = (shipment: any) => {
    console.log('üìù [Dashboard] Opening edit modal for:', shipment.shipment_number)
    setShowEditModal(shipment)
  }

  const handleDeleteShipment = (shipment: any) => {
    console.log('üóëÔ∏è [Dashboard] Opening delete modal for:', shipment.shipment_number)
    setShowDeleteModal(shipment)
  }

  // Handle AI actions from chat
  const handleAIAction = (action: string, shipmentId: string) => {
    console.log(`AI Action: ${action} for shipment ${shipmentId}`)
    
    const newAction = {
      id: Date.now().toString(),
      action,
      shipmentId,
      timestamp: new Date(),
      status: 'completed'
    }
    setAIActions(prev => [newAction, ...prev.slice(0, 9)])
    
    console.log(`‚úÖ AI Action completed: ${action}`)
  }

  // ‚úÖ Handle communication sending and triggering (receives from CommunicationHub)
  const handleCommunicationSent = (communication: any) => {
    console.log('Communication sent:', communication)
    
    // Add to triggered communications for export
    setTriggeredCommunications(prev => {
      // Check if communication already exists to avoid duplicates
      const exists = prev.some(comm => comm.id === communication.id)
      if (exists) return prev
      
      return [communication as CommunicationItem, ...prev.slice(0, 49)]
    })
    
    const newAIAction = {
      id: Date.now().toString(),
      action: `sent_${communication.type}`,
      shipmentId: communication.shipmentId,
      timestamp: new Date(),
      status: 'completed'
    }
    setAIActions(prev => [newAIAction, ...prev.slice(0, 9)])
    
    console.log(`‚úÖ ${communication.type} sent successfully`)
  }

  // Handle AI Actions Dashboard shipment selection
  const handleAIActionShipmentSelect = (shipmentId: string) => {
    const shipment = localShipments.find(s => s.id === shipmentId)
    if (shipment) {
      setSelectedShipment(shipment)
      console.log('AI Actions selected shipment for map:', shipment.shipment_number)
      
      const mapSection = document.querySelector('[data-map-section]')
      if (mapSection) {
        mapSection.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        })
      }
    }
  }

  // Handle shipment table row clicks for map integration  
  const handleShipmentClick = (shipment: Shipment) => {  
    console.log('üìç Dashboard received shipment click:', shipment.shipment_number)

    setSelectedShipment(shipment)
    console.log('Selected shipment for map:', shipment.shipment_number)
    
    const mapSection = document.querySelector('[data-map-section]')
    if (mapSection) {
      mapSection.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'center' 
      })
    }
  }

  // Handle header actions
  const handleExport = () => {
    setShowExportModal(true)
  }

  const handleProfile = () => {
    console.log('Profile clicked')
  }

  const handleSettings = () => {
    console.log('Settings clicked')
  }

  // üöÄ SIMULATION MODAL HANDLERS
  const handleStartSimulation = () => {
    console.log('üöõ Starting simulation modal')
    setShowSimulationModal(true)
  }

  const handleSimulationUpdate = async (shipmentId: string, updates: any): Promise<boolean> => {
    // Pass through to main update handler
    return handleShipmentUpdate(shipmentId, updates)
  }

  // Calculate analytics from LOCAL shipments (not hook shipments)
  const calculateAnalytics = (shipments: Shipment[]) => {
    const total = shipments.length
    const active = shipments.filter(s => s.status === 'in_transit').length
    const delivered = shipments.filter(s => s.status === 'delivered').length
    const delayed = shipments.filter(s => s.status === 'delayed').length
    const pending = shipments.filter(s => s.status === 'pending').length
    
    // Calculate total revenue (simplified calculation)
    const totalRevenue = shipments.reduce((sum, shipment) => {
      if ((shipment as any).revenue) {
        return sum + (shipment as any).revenue
      }
      const distance = (shipment as any).distance_km || 500
      const baseRate = 3.5
      const revenue = distance * baseRate * (0.8 + Math.random() * 0.4)
      return sum + revenue
    }, 0)
    
    const onTimePercentage = total > 0 ? ((delivered + active) / total) * 100 : 0
    
    const aiActivity = {
      total: Math.floor(total * 3.2) + aiActions.length + approvalActions.length + triggeredCommunications.length,
      calls: Math.floor(total * 0.8) + aiActions.filter(a => a.action === 'call_driver').length,
      emails: Math.floor(total * 1.5) + aiActions.filter(a => a.action === 'email_customer').length + triggeredCommunications.filter(c => c.type === 'email').length,
      notifications: Math.floor(total * 0.9) + aiActions.filter(a => a.action.includes('notification')).length
    }

    const statusDistribution = [
      { status: 'In Transit', count: active, color: '#2563EB' },
      { status: 'Delivered', count: delivered, color: '#10B981' },
      { status: 'Pending', count: pending, color: '#F59E0B' },
      { status: 'Delayed', count: delayed, color: '#EF4444' }
    ]

    const kpis = [
      {
        title: 'Active Loads',
        value: active.toString(),
        change: 12,
        changeType: 'increase' as const,
        icon: 'truck',
        color: 'blue'
      },
      {
        title: 'Total Revenue',
        value: `$${(totalRevenue / 1000).toFixed(1)}K`,
        change: 8.5,
        changeType: 'increase' as const,
        icon: 'dollar',
        color: 'green'
      },
      {
        title: 'AI Actions',
        value: aiActivity.total.toString(),
        change: 23,
        changeType: 'increase' as const,
        icon: 'robot',
        color: 'purple'
      },
      {
        title: 'On-Time Rate',
        value: `${onTimePercentage.toFixed(1)}%`,
        change: 4.2,
        changeType: 'increase' as const,
        icon: 'clock',
        color: 'orange'
      }
    ]

    return {
      overview: {
        totalShipments: total,
        activeShipments: active,
        deliveredShipments: delivered,
        delayedShipments: delayed,
        pendingShipments: pending,
        totalRevenue: Math.round(totalRevenue),
        onTimePercentage: Math.round(onTimePercentage)
      },
      kpis,
      statusDistribution,
      aiActivity
    }
  }

  // ‚úÖ Update dashboard data when LOCAL shipments change
  useEffect(() => {
    if (localShipments.length > 0) {
      const analytics = calculateAnalytics(localShipments)
      setDashboardData(analytics)
      setLoading(false)
    } else if (!shipmentsLoading) {
      setDashboardData({
        overview: {
          totalShipments: 0,
          activeShipments: 0,
          deliveredShipments: 0,
          delayedShipments: 0,
          pendingShipments: 0,
          totalRevenue: 0,
          onTimePercentage: 0
        },
        kpis: [
          { title: 'Active Loads', value: '0', change: 0, changeType: 'increase', icon: 'truck', color: 'blue' },
          { title: 'Total Revenue', value: '$0', change: 0, changeType: 'increase', icon: 'dollar', color: 'green' },
          { title: 'AI Actions', value: '0', change: 0, changeType: 'increase', icon: 'robot', color: 'purple' },
          { title: 'On-Time Rate', value: '0%', change: 0, changeType: 'increase', icon: 'clock', color: 'orange' }
        ],
        statusDistribution: [],
        aiActivity: { total: 0, calls: 0, emails: 0, notifications: 0 }
      })
      setLoading(false)
    }
  }, [localShipments, shipmentsLoading, aiActions, approvalActions, triggeredCommunications])

  // Manual refresh function for table
  const handleRefresh = async () => {
    try {
      console.log('üîÑ Manual table refresh...')
      setLocalShipments(hookShipments)
      console.log('‚úÖ Manual table refresh completed')
    } catch (error) {
      console.error('‚ùå Error refreshing data:', error)
    }
  }

  // Handle new shipment creation
  const handleShipmentCreated = async (newShipment: any) => {
    console.log('New shipment created:', newShipment.shipment_number)
    setShowCreateModal(false)
    setLocalShipments(prev => [newShipment, ...prev])
  }

  if (loading && shipmentsLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 text-lg">Loading analytics dashboard...</p>
        </div>
      </div>
    )
  }
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <Header
        user={user ? {
          name: user.user_metadata?.full_name || user.email?.split('@')[0],
          email: user.email,
          avatar: user.user_metadata?.avatar_url
        } : undefined}
        onLogout={signOut}
        onExport={handleExport}
        onProfile={handleProfile}
        onSettings={handleSettings}
        onAddShipment={() => setShowCreateModal(true)}
      />

      {/* Main Dashboard Content */}
      <main className="px-6 py-6">
        {/* KPI Cards - Top Row */}
        {dashboardData && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {dashboardData.kpis.map((kpi, index) => (
              <MetricsCard
                key={index}
                title={kpi.title}
                value={kpi.value}
                change={kpi.change}
                changeType={kpi.changeType}
                icon={kpi.icon}
                color={kpi.color}
              />
            ))}
          </div>
        )}

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
          {/* Left & Center - Map View */}
          <div className="lg:col-span-2" data-map-section>
            <div className="bg-white rounded-lg shadow-sm border border-gray-200 h-[600px] relative">
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold text-gray-900">Live Tracking Map</h3>
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center space-x-2">
                      <div className="flex items-center space-x-1">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        <span className="text-xs text-gray-600">Real-time</span>
                      </div>
                      <span className="text-sm text-gray-500">
                        {selectedShipment ? `üìç Viewing: ${selectedShipment.shipment_number}` : `${localShipments.length} shipments`}
                      </span>
                    </div>
                    
                    {/* üöÄ SIMULATION BUTTON */}
                    <button
                      onClick={handleStartSimulation}
                      className="flex items-center space-x-2 bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-sm transition-colors"
                    >
                      <span>üöõ</span>
                      <span>Live Simulation</span>
                    </button>
                  </div>
                </div>
              </div>
              <div className="h-[540px]">
                <MapView
                  shipments={localShipments}
                  selectedShipment={selectedShipment}
                  onSelectShipment={setSelectedShipment}
                  className="h-full rounded-b-lg"
                />
              </div>
            </div>
          </div>

          {/* Right Column - Status Overview */}
          <div className="lg:col-span-1">
            {dashboardData && (
              <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 h-[600px]">
                <h3 className="text-lg font-semibold text-gray-900 mb-6">Status Overview</h3>
                
                <div className="space-y-4">
                  {dashboardData.statusDistribution.map((status, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: status.color }}
                        ></div>
                        <span className="text-sm font-medium text-gray-700">{status.status}</span>
                      </div>
                      <div className="text-right">
                        <div className="text-lg font-bold text-gray-900">{status.count}</div>
                        <div className="text-xs text-gray-500">
                          {dashboardData.overview.totalShipments > 0 
                            ? `${Math.round((status.count / dashboardData.overview.totalShipments) * 100)}%`
                            : '0%'
                          }
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Performance Summary */}
                <div className="mt-6 pt-6 border-t border-gray-200">
                  <h4 className="text-sm font-medium text-gray-900 mb-4">Performance</h4>
                  
                  <div className="space-y-3">
                    <div>
                      <div className="flex justify-between text-sm mb-1">
                        <span className="text-gray-600">On-Time Rate</span>
                        <span className="font-medium">{dashboardData.overview.onTimePercentage}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-green-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${dashboardData.overview.onTimePercentage}%` }}
                        ></div>
                      </div>
                    </div>
                    
                    <div className="pt-2">
                      <div className="text-sm text-gray-600">Total Revenue</div>
                      <div className="text-xl font-bold text-green-600">
                        ${(dashboardData.overview.totalRevenue / 1000).toFixed(1)}K
                      </div>
                    </div>

                    <div className="pt-2">
                      <div className="text-sm text-gray-600">AI Actions Today</div>
                      <div className="text-xl font-bold text-purple-600">
                        {dashboardData.aiActivity.total}
                      </div>
                      <div className="text-xs text-gray-500">
                        {dashboardData.aiActivity.calls} calls, {dashboardData.aiActivity.emails} emails
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* AI Actions Dashboard & Communication Hub */}
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-8">
          <AIActionsDashboard
            shipments={localShipments}
            timeframe={timeframe}
            onShipmentSelect={handleAIActionShipmentSelect}
          />

          {/* ‚úÖ UPDATED: Pass the memoized callback to CommunicationHub */}
          <CommunicationHub
            shipments={localShipments}
            selectedShipment={selectedShipment}
            onSendCommunication={handleCommunicationSent}
            onCommunicationsGenerated={handleCommunicationsGenerated}
          />
        </div>

        {/* ‚úÖ ShipmentTable with LOCAL shipments */}
        <div className="mt-8">
          <ShipmentTable 
            shipments={localShipments}
            onRefresh={handleRefresh}
            onShipmentClick={handleShipmentClick}  
            selectedShipment={selectedShipment}
            onEditShipment={handleEditShipment}
            onDeleteShipment={handleDeleteShipment}
          />
        </div>

        {/* Empty State */}
        {localShipments.length === 0 && !shipmentsLoading && (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2-2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2M4 13h2m-2 0h2m0-7v7m14-7v7M8 5v7m8-7v7" />
              </svg>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">No Shipments Found</h3>
            <p className="text-gray-600 mb-6">Get started by creating your first shipment with AI enrichment.</p>
            <button
              onClick={() => setShowCreateModal(true)}
              className="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition-colors"
            >
              Create First Shipment
            </button>
          </div>
        )}
      </main>

      {/* ‚úÖ ALL MODALS */}
      
      {/* Create Shipment Modal */}
      {showCreateModal && (
        <CreateShipmentModal
          onClose={() => setShowCreateModal(false)}
          onShipmentCreated={handleShipmentCreated}
        />
      )}

      {/* ‚úÖ Edit Shipment Modal */}
      {showEditModal && (
        <EditShipmentModal
          shipment={showEditModal}
          onClose={() => setShowEditModal(null)}
          onUpdate={handleShipmentUpdate}
        />
      )}

      {/* ‚úÖ Delete Shipment Modal */}
      {showDeleteModal && (
        <DeleteShipmentModal
          shipment={showDeleteModal}
          onClose={() => setShowDeleteModal(null)}
          onDelete={handleShipmentDelete}
        />
      )}

      {/* ‚úÖ UPDATED: Export Modal with generated communications */}
      {showExportModal && (
        <ExportModal
          shipments={localShipments}
          communications={[...generatedCommunications, ...triggeredCommunications]}
          onClose={() => setShowExportModal(false)}
        />
      )}

      {/* üöÄ SIMULATION MODAL */}
      {showSimulationModal && (
        <SimulationModal
          shipments={localShipments}
          onClose={() => setShowSimulationModal(false)}
          onShipmentUpdate={handleSimulationUpdate}
        />
      )}

      {/* ENHANCED AI CHAT */}
      <AIChat
        shipments={localShipments}
        onShipmentAction={handleAIAction}
        openaiApiKey={openaiApiKey}
      />
    </div>
  )
}